output ((((["valves: ",_toString_valves(valves,false,false),"\n"]++["time_open: ",show(time_open),"\n"])++["flow_rate: ",show(flow_rate),"\n"])++["current_valve_person: ",_toString_valves(current_valve_person,false,false),"\n"])++[show(obj),"\n"])++[show(sum(bool2int(valve_is_opened_at_time_by_person))),"\n"];
function string : _toString_valves(opt set of valves: x,bool: b,bool: json) = if absent(x) then if json then "null" else "<>" endif else ((("{"++if json then "\"set\":[" else "" endif)++join(", ",[_toString_valves(i,b,json) | i in deopt(x), ]))++if json then "]" else "" endif)++"}" endif;
function string : _toString_valves(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_valves[deopt(x)]) elseif json then ("{\"e\":\""++_enum_to_string_0_valves[deopt(x)])++"\"}" else _enum_to_string_0_valves[deopt(x)] endif else if json then "null" else "<>" endif endif;
function string : _toString_valves(array [$U] of opt valves: x,bool: b,bool: json) = let {array [int] of opt valves: xx = array1d(x)} in (("["++join(", ",[_toString_valves(xx[i],b,json) | i in index_set(xx), ]))++"]");
set of int: valves = 1..10;
int: minutes = 30;
array [valves] of int: flow_rate = [0,13,2,20,3,0,0,22,0,21];
array [valves,1..minutes] of bool: valve_is_opened_at_time_by_person;
array [valves] of int: time_open;
array [1..minutes] of int: current_valve_person;
int: obj;
array [1..10] of string: _enum_to_string_0_valves = ["AA","BB","CC","DD","EE","FF","GG","HH","II","JJ"];
